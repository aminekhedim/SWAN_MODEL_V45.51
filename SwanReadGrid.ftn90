subroutine SwanReadGrid ( basenm, lenfnm )
!
!   --|-----------------------------------------------------------|--
!     | Delft University of Technology                            |
!     | Faculty of Civil Engineering and Geosciences              |
!     | Environmental Fluid Mechanics Section                     |
!     | P.O. Box 5048, 2600 GA  Delft, The Netherlands            |
!     |                                                           |
!     | Programmer: Marcel Zijlema                                |
!   --|-----------------------------------------------------------|--
!
!
!     SWAN (Simulating WAves Nearshore); a third generation wave model
!     Copyright (C) 1993-2024  Delft University of Technology
!
!     This program is free software: you can redistribute it and/or modify
!     it under the terms of the GNU General Public License as published by
!     the Free Software Foundation, either version 3 of the License, or
!     (at your option) any later version.
!
!     This program is distributed in the hope that it will be useful,
!     but WITHOUT ANY WARRANTY; without even the implied warranty of
!     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
!     GNU General Public License for more details.
!
!     You should have received a copy of the GNU General Public License
!     along with this program. If not, see <http://www.gnu.org/licenses/>.
!
!
!   Authors
!
!   40.80: Marcel Zijlema
!
!   Updates
!
!   40.80, July 2007: New subroutine
!
!   Purpose
!
!   Reads unstructured grid generated by a grid generator
!
!   Method
!
!   Reads data from either ADCIRC, Triangle or Easymesh
!
!   Modules used
!
    use ocpcomm4
    use swcomm2
    use swcomm3
    use SwanGriddata
!
    implicit none
!
!   Argument variables
!
    integer, intent(in)           :: lenfnm ! length of file names
    character(lenfnm), intent(in) :: basenm ! base name of unstructured grid files
!
!   Local variables
!
    integer       :: i        ! loop counter
    integer, save :: ient = 0 ! number of entries in this subroutine
!
!   Structure
!
!   Description of the pseudo code
!
!   Source text
!
    if (ltrace) call strace (ient,'SwanReadGrid')
    !
    if ( grid_generator == meth_adcirc ) then
       !
       ! grid is given in ADCIRC grid file (fort.14)
       !
       call SwanReadADCGrid
       !
    elseif ( grid_generator == meth_triangle ) then
       !
       ! grid is generated by Triangle
       !
       call SwanReadTriangleGrid ( basenm, lenfnm )
       !
    elseif ( grid_generator == meth_easy ) then
       !
       ! grid is generated by Easymesh
       !
       call SwanReadEasymeshGrid ( basenm, lenfnm )
       !
    else
       !
       call msgerr ( 4, 'Unknown grid generator' )
       return
       !
    endif
    !
    ! compute coordinate offsets and reset grid coordinates
    !
    do i = 1, nverts
       if ( .not.LXOFFS ) then
          XOFFS = xcugrd(i)
          YOFFS = ycugrd(i)
          LXOFFS = .true.
          xcugrd(i) = 0.
          ycugrd(i) = 0.
       else
          xcugrd(i) = real(xcugrd(i) - dble(XOFFS))
          ycugrd(i) = real(ycugrd(i) - dble(YOFFS))
       endif
    enddo
    !
    ! compute XCGMIN, XCGMAX, YCGMIN, YCGMAX
    !
    XCGMIN =  1.e9
    YCGMIN =  1.e9
    XCGMAX = -1.e9
    YCGMAX = -1.e9
    do i = 1, nverts
       if ( xcugrd(i) < XCGMIN ) XCGMIN = xcugrd(i)
       if ( ycugrd(i) < YCGMIN ) YCGMIN = ycugrd(i)
       if ( xcugrd(i) > XCGMAX ) XCGMAX = xcugrd(i)
       if ( ycugrd(i) > YCGMAX ) YCGMAX = ycugrd(i)
    enddo
    !
    ! compute lengths of enclosure of computational domain
    !
    XCLEN = XCGMAX - XCGMIN
    YCLEN = YCGMAX - YCGMIN
    !
end subroutine SwanReadGrid
